# -*- coding: utf-8 -*-
"""Liar's Dice

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xDmgR5qSXFgtOu2JgsxLr6fJRhMN2r8f
"""

import random

def start_game():
  # Get names.
  global p1
  global p2
  p1 = input("Enter Player 1's name: ")
  p2 = input("Enter Player 2's name: ")

  # Set player lives.
  global p1_lives
  global p2_lives
  p1_lives = 5
  p2_lives = 5

  # Randomly select starting player.
  global current_player
  p1_start = random.choice([True, False])
  if p1_start is True:
    current_player = p1
  else:
    current_player = p2

start_game()

def roll_dices(player_lives, player_dice):
  for rolls in range(player_lives):
    rolled = random.randint(1, 6)
    player_dice.append(rolled)
  return(player_dice)

def bid():
  global bid_value
  while True:
    try:
      bid_value = int(input("Enter your bid for the sum of all dices: "))
      if current_bid >= bid_value:
        print("Your new bid needs to be higher than the current bid!!")
        continue
      else:
        return(bid_value)
    except ValueError:
      print("Not an integer!")
      continue
    else:
      break

def check_sums():
  pass

def take_action():
  while True:
    val = lower(input("Call bullshit? (y/n)"))
    if val == y:
      check_sums()
    elif val == yes:
      check_sums()
    elif val == n:
      bid()
    elif val == no:
      bid()
    else:
      print("Not a valid input")
      continue



def start_bidding():
  print("It's your turn,", current_player)
  bid()
  global current_bid
  current_bid = bid_value

def start_round():
  print("It's the start of a new round!!")
  global p1_dices
  global p2_dices
  global current_bid
  global current_player
  current_player = ""
  p1_dices = []
  p2_dices = []
  roll_dices(p1_lives, p1_dices)
  roll_dices (p2_lives, p2_dices)
  current_bid = 0
  print('Player 1 got:', p1_dices)
  print('Player 2 got:', p2_dices)
  print("It's your turn,", current_player)
  bid()
  current_bid = bid_value

  # Swap current player.
  if current_player == p1:
    current_player = p2
  else:
    current_player = p1

start_round()

start_bidding()

current_bid
current_player
